{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import math\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = [1.0,2.0,3.0]\n",
    "y = [1.2,1.9,3.2]\n",
    "def calcLogLikelihood(guess, true, n):\n",
    "    error = np.array(true)-np.array(guess)\n",
    "    sigma = np.std(error)\n",
    "    f = ((1.0/(2.0*math.pi*sigma*sigma))**(n/2))* \\\n",
    "        np.exp(-1*((np.dot(error.T,error))/(2*sigma*sigma)))\n",
    "    return np.log(f)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "def myFunction(var):\n",
    "    y_guess = []\n",
    "    for i in range(0,3):\n",
    "      c = var[1]*x[i] + var[0]\n",
    "      y_guess.append(c)\n",
    "    f = calcLogLikelihood(y_guess, y, float(len(y_guess)))\n",
    "    return (-1*f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: -1.611219\n",
      "         Iterations: 18\n",
      "         Function evaluations: 164\n",
      "         Gradient evaluations: 41\n"
     ]
    }
   ],
   "source": [
    "nvar = 2\n",
    "var = np.zeros(nvar)\n",
    "var[0] = -20\n",
    "var[1] = 23\n",
    "from scipy.optimize import minimize\n",
    "res = minimize(myFunction, var, method='BFGS',options={'disp': True})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      fun: -1.6112189085281483\n",
      " hess_inv: array([[ 0.046843  , -0.0201102 ],\n",
      "       [-0.0201102 ,  0.01006886]])\n",
      "      jac: array([-2.98023224e-08, -2.08616257e-07])\n",
      "  message: 'Optimization terminated successfully.'\n",
      "     nfev: 164\n",
      "      nit: 18\n",
      "     njev: 41\n",
      "   status: 0\n",
      "  success: True\n",
      "        x: array([0.10000005, 0.99999997])\n"
     ]
    }
   ],
   "source": [
    "print(res)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.10000005390151459\n"
     ]
    }
   ],
   "source": [
    "print(res['x'][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x154f87beda0>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "%matplotlib inline\n",
    "y_pred = []\n",
    "for i in range(0,3):\n",
    "  c = res['x'][1]*x[i] + res['x'][0]\n",
    "  y_pred.append(c)\n",
    "\n",
    "sns.scatterplot(x,y,color='red')\n",
    "sns.lineplot(x,y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}